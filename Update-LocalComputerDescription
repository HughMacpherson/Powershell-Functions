Function Update-LocalComputerDescription {
  <#
  .SYNOPSIS
      Updates the local or a remote computers DESCRIPTION in System Properties.

  .DESCRIPTION
      Updates the local or a remote computers DESCRIPTION in System Properties.

  .EXAMPLE
      PS:\> Update-LocalComputerDescription -ComputerName $ComputerName -Description $Description

  .LINK
      http://github.com/HughMacpherson
  #>

  param (
    [Parameter(
        Position = 0,
        ValueFromPipeline=$true,
        ValueFromPipelineByPropertyName=$true,
        ValueFromRemainingArguments=$false)]
    [ValidateNotNullOrEmpty()]
    [Alias('CN','__SERVER','Server','Computer')]
    [string[]]$ComputerName = $env:computername,
    [Parameter(
        Position = 1,
        ValueFromPipeline=$true,
        ValueFromPipelineByPropertyName=$true)]
    [ValidateNotNullOrEmpty()]
    [string[]]$Description)

    ForEach ($Computer in $ComputerName) {
        TRY {
            $WMIOperatingSystem = get-wmiobject -ClassName win32_OperatingSystem -ComputerName $Computer -ErrorAction stop
            $OrignalDescription = $WMIOperatingSystem.Description
            $WMIOperatingSystem.Description=$Description
            $WMIOperatingSystem.put() | Out-Null
            $NewDescription = get-wmiobject -ClassName win32_OperatingSystem -ComputerName $Computer  -ErrorAction stop | Select-object -expandproperty Description

            $properties = [ordered]@{
                                    ComputerName = $Computer
                                    OrignalDescription = $OrignalDescription
                                    UpdatedDescription = $NewDescription
                                    }
        } CATCH {
            $properties = [ordered]@{
                                    ComputerName = $Computer
                                    OrignalDescription = ''
                                    UpdatedDescription = ''
                                    }
        } FINALLY {
              $obj = New-Object -TypeName psobject -Property $properties
              Write-Output $obj
        }
    } #ForEach
} #Function
